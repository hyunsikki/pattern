## Decoartor pattern
	 - 데코레이터 패턴은 객체의 추가적인 요건을 동적으로 추가한다.
	 - 데코레이터는 서브 클래스를 만드는 것을 통해서 기능을 유연하게 확장할 수 있는 방법을 제공한다.
	 - 한 객체를 여러 개의 데코레이터로 감쌀 수 있다.
	 - 기존 코드를 수정하지 않고도 행동을 확장할 수 있다.
	
	 ※ 단점
	 - 데코레이터 패턴을 이용해 디자인을 하다 보면 잡다한 클래스가 많아 질 수 있다.
	 - 겹겹이 애워싼 객체의 정체를 알기가 힘들다.
	 - 상속을 통해 확장할 수도 있지만, 디자인 유연성 면에서는 별로 좋지 않다.
 
 



## OCP (Open-Closed Principle)
	 - OCP는 가장 중요한 디자인 원칙 가운데 하나다.
	 - 클래스는 확장에 대해서는 열려 있어야 하지만 코드 변경에 있어서는 닫혀 있어야 한다.
	 - 즉 기존 코드는 건드리지 않은 채로 확장을 통해서 새로운 행동을 간단하게 추가할 수 있도록 하면,
	   새로운 기능을 유연하게 추가할 수 있어, 주변 환경에 잘 적응할 수 있으면서도 강하고 튼튼한 디자인을 만들 수 있다. 

	   
	   
	   
## Strategy Pattern (스트래티지 패턴)
	  - "변하는 부분은 따로 떼어 분리시켜라"
	  - 달라지는 부분을 찾아내고, 달라지지 않는 부분으로부터 분리시켜 캡슐화한다.
	  - 상속보다 구성을 활용한다.
	   실제 실행시에 쓰이는 객체가 코드에 의해서 고정되지 않도록 어떤 상위 형식에 맞춰서 프로그래밍함으로써 다형성을 활용하는 패턴이다.
	   상위 형식에맞춰서 프로그래밍한다는 원칙은 변수를 선언할 때 보통 추상클래스나 인터페이스 같은 상위 형식으로 선언해야 한다. 
	   그렇게 할 경우 객체를 변수에대입할 때 어떤 형식이든 집어넣을 수 있다.
	
	   구성이란 "A에는 B가 있다"라는 관계로 설명할 수 있으며 상위 클래스에서 여러 개의 인터페이스 형식의 인스턴스 변수를 추가하여 합치는 것을 구성(Composition)을 이용하는 것이라고 한다. 
	   구성은 단순히 알고리즘 군을 별도의 클래스의 집합으로 캡슐화할 수 있도록 만들어 주는 것뿐 아니라 구성 요소로 사용하는 객체에서 올바른 행동 인터페이스를 구현하기만 하면 실행 시에 행동을 바꿀 수 있게 해준다.